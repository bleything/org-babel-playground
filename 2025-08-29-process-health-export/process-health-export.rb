#!/usr/bin/env ruby

### WARNING: This file is generated by babel. Changes will be lost.

require 'json'

export = JSON.load_file("export.json")
workouts = export['data']['workouts']

### remove unwanted fields

filtered = workouts.map do |workout|
  workout['id'].downcase!

  start = Time.new(workout.delete 'start')
  workout.delete 'end'

  workout['date'] = start.strftime("%Y-%m-%d")

  workout['time_of_day'] = case start.hour
                           when 0..4
                             "night"
                           when 5..11
                             "morning"
                           when 12..17
                             "afternoon"
                           when 18..21
                             "evening"
                           when 22..24
                             "night"
                           else
                             "FIXME"
                           end

  workout.delete 'location'
  workout.delete 'name'

  workout.delete 'intensity'
  workout.delete 'metadata'

  workout.delete 'activeEnergy'
  workout.delete 'activeEnergyBurned'
  workout.delete 'heartRateRecovery'

  workout.delete 'route'
  workout.delete 'heartRateData'
  workout.delete 'walkingAndRunningDistance'

  workout
end

### flatten complex keys

targets = %w[
  distance elevationUp humidity intensity temperature
]

filtered.map! do |workout|
  targets.each do |target|
    next unless workout[target]

    workout["#{target}_qty"] = workout[target]['qty']
    workout["#{target}_units"] = workout[target]['units']
    workout.delete target
  end

  workout
end

### aggregate step count


filtered.map! do |workout|
  # this will insert a nil into the array if the workout doesn't have a
  # stepCount field but that's fine because if there's no steps there's nothing
  # to display later. we'll need to filter those nils out later
  next unless workout['stepCount']

  # this should almost always be "steps" and I'd be tempted to hard-code that but
  # without a way to be sure I think it's safer to just leave a trap in here so we
  # can address it if it comes up
  units = workout['stepCount'].map {|sc| sc['units'] }.uniq
  raise "unknown stepCount units: #{units.join ' '}" if units.size > 1

  workout['stepCount_units'] = units.first
  workout['stepCount_qty'] = workout['stepCount'].map {|sc| sc['qty'] }.sum

  sample_count = 0
  workout['stepCount'].map! do |sc|
    sc.delete 'source'
    sc.delete 'units'

    sc.delete 'date'
    sc['id'] = (sample_count += 1)

    sc
  end

  workout
end

### save and report

require 'fileutils'
FileUtils.rm_rf 'output'

new_size = 0

output_walks = filtered.compact

output_walks.each do |walk|
  year = walk['date'][0..3]
  month = walk['date'][5..6]

  path = File.join "output", year, month, "#{walk['id']}.json"

  FileUtils.mkdir_p File.dirname(path)
  File.open(path, "w") do |f|
    # whitespace removed
    # out = walk.to_json

    # pretty-printed
    out = JSON.pretty_generate(walk)

    f.puts out
    new_size += f.size
  end
end

old_size = File.size("export.json")

# cast these to floats so we get more resolution for the percentage calc
reduction = (old_size - new_size).to_f / old_size.to_f

puts "Processed %i workouts. File size reduced by %.2f%%, from %i to %i bytes" % [
  output_walks.length,
  reduction * 100.0,
  old_size,
  new_size
]
